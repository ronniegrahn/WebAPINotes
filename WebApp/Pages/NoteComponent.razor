@page "/notes/{noteId:int}"
@page "/projects/{projectId:int}/addnote"

@inject NavigationManager NavigationManager
@inject INotesScreenUseCases NotesScreenUseCases
@inject INoteScreenUseCases NoteScreenUseCases

<h3>Note</h3>
<br />

<AlertComponent @ref="alertComponent"></AlertComponent>

@if (note != null)
{
<EditForm Model="note" OnValidSubmit="Save">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText class="form-control" id="title" @bind-Value="note.Title"></InputText>
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputText class="form-control" id="description" @bind-Value="note.Description"></InputText>
    </div>
    <div class="mb-3">
        <label for="owner" class="form-label">Owner</label>
        <InputText class="form-control" id="owner" @bind-Value="note.Owner"></InputText>
    </div>
    <div class="mb-3">
        <label for="reportdate" class="form-label">Report Date</label>
        <InputDate class="form-control" id="reportdate" @bind-Value="note.ReportDate"></InputDate>
    </div>
    <div class="mb-3">
        <label for="duedate" class="form-label">Due Date</label>
        <InputDate class="form-control" id="duedate" @bind-Value="note.DueDate"></InputDate>
    </div>

    <button class="btn btn-primary" type="submit">Save</button>
    &nbsp;
    <button class="btn btn-danger" type="button" @onclick="DeleteNote">Delete</button>

</EditForm>
}


@code {
    Note note;
    AlertComponent alertComponent;

    [Parameter]
    public int? NoteId { get; set; }

    [Parameter]
    public int? ProjectId { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        if(NoteId.HasValue)
            note = await NotesScreenUseCases.ViewNoteById(NoteId.Value);

        if (ProjectId.HasValue && note == null)
            note = new Note { ProjectId = this.ProjectId.Value };
    }

    async Task Save()
    {
        bool bSuccess = true;

        if (!note.ValidateDescription())
        {
            alertComponent.ErrorMessage = "Description is required";
            alertComponent.Show();
            bSuccess = false;
        }

        if (!note.ValidateFutureDueDate())
        {
            alertComponent.ErrorMessage = "The due date must be in the future.";
            alertComponent.Show();
            bSuccess = false;
        }

        if (!note.ValidateReportDatePresence())
        {
            alertComponent.ErrorMessage = "The Report Date is required.";
            alertComponent.Show();
            bSuccess = false;
        }

        if (!note.ValidatDueDatePresence())
        {
            alertComponent.ErrorMessage = "The Due Date is required.";
            alertComponent.Show();
            bSuccess = false;
        }

        if (!note.ValidateDueDateAfterReportDate())
        {
            alertComponent.ErrorMessage = "The Due Date must be later than the Report Date.";
            alertComponent.Show();
            bSuccess = false;
        }

        if (bSuccess)
        {
            if (NoteId.HasValue)
                await NotesScreenUseCases.UpdateNote(note);
            else
                await NoteScreenUseCases.AddNote(note);

            NavigationManager.NavigateTo($"/projects/{note.ProjectId}/notes");
        }


    }

    private async Task DeleteNote()
    {
        if (!NoteId.HasValue) return;

        await NoteScreenUseCases.DeleteNote(NoteId.Value);

        NavigationManager.NavigateTo($"/projects/{note.ProjectId}/notes");
    }
}
